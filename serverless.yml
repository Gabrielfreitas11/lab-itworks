service: serverless-uploads

provider:
  name: aws
  endpointType: REGIONAL
  stage: ${opt:stage, 'local'}
  runtime: nodejs14.x
  region: sa-east-1
  versionFunctions: false
  # profile: default
  deploymentBucket:
    name: it-works-lab-serverless
  memorySize: 512
  timeout: 30
  environment: ${file(./config/env.${opt:stage}.yml)}

package:
  patterns:
    - "lib/phantomjs/phantomjs-linux"
    - "lib/phantomjs/phantomjs-mac"

functions:
  downloadXML:
    disableLogs: true
    handler: src/routes.downloadXML
    environment:
      client: uploads
      service: downloadXML
    events:
      - http:
          path: downloadXML
          method: POST

  getFiles:
    # disableLogs: true
    handler: src/routes.getFiles
    environment:
      client: uploads
      service: getFiles
    events:
      - http:
          path: getFiles
          method: POST

  getNFE:
    handler: src/routes.getNFE
    environment:
      client: uploads
      service: getNFE
    events:
      - http:
          path: getNFE
          method: POST

  uploadKeysNFe:
    handler: src/routes.uploadKeysNFe
    environment:
      client: uploads
      service: uploadKeysNFe
    events:
      - http:
          path: uploadKeysNFe
          method: POST
          cors:
            origin: "http://localhost:4200, https://app.impostograma.com.br"
            # origin: "https://app.impostograma.com.br"
            headers: "Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token, cnpj, type"
            methods: "POST"

  uploadKeysNFeStatus:
    handler: src/routes.uploadKeysNFeStatus
    environment:
      client: uploads
      service: uploadKeysNFeStatus
    events:
      - http:
          path: uploadKeysNFeStatus
          method: GET
          cors:
            origin: "http://localhost:4200, https://app.impostograma.com.br"
            # origin: "https://app.impostograma.com.br"
            headers: "Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token, cnpj, type"
            methods: GET

  uploadsFiles:
    # disableLogs: true
    handler: src/routes.uploadsFiles
    environment:
      client: uploads
      service: uploadsFiles
    events:
      - http:
          path: uploadsFiles
          method: POST

  workerUploadsFiles:
    # disableLogs: true
    handler: src/routes.workerUploadsFiles
    environment:
      client: uploads
      service: workerUploadsFiles
    events:
      - http:
          path: workerUploadsFiles
          method: POST

custom:
  currentStage: ${self:provider.stage}
  serverlessIfElse:
    - If: '"${self:custom.currentStage}" == "dev"'
      Exclude:
        - functions.uploadsFiles
        - functions.workerUploadsFiles

  customDomain:
    domainName: "services.impostograma.com.br"
    basePath: "uploads-${self:provider.stage}"
    stage: ${self:provider.stage}
  serverless-offline:
    host: 0.0.0.0
    port: 3000

plugins:
  - serverless-offline
  - serverless-domain-manager
  - serverless-plugin-ifelse
